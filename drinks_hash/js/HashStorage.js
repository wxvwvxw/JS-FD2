'use strict';

	function HashStorage() {
        var self = this;
    };
    HashStorage.prototype.storage = {};
    HashStorage.prototype.addValue = function(key,value) {
        this.storage[key] = value;
    }
    HashStorage.prototype.getValue = function(key) {
        if(key in this.storage) {
            console.log('Напиток'+this.storage[key]);
            return this.storage[key];
        }
        else {
            return undefined; 
        }
    }
    HashStorage.prototype.deleteValue = function(key) {
        if(key in this.storage) {
            delete this.storage[key];
            return true;
        }
        else {
            return false;
        }
    }
    HashStorage.prototype.getKeys = function() {
        return Object.keys(this.storage);
    }

    var drinkStorage = new HashStorage(); // после описания класса, я создаю его объект, хранилище напитков, создаю вне функции, в глобальной зоне видимости, т.к. такой объект нужен только один, с ним будут работать функции вызываемые по кнопкам с веб страницы. 

function question() {  // далее описываю функцию в которой:
    var drinkName = prompt('Введите название напитка'); // создаю переменную для хранения названия напитка
    var drinkAlco = confirm('Напиток алкогольный?(Нажмите ОK если Да, иначе нажмите Отмена)'); //создаю переменную для хранения алкогольности/неалкогольности напитка
    var drinkRecipe = prompt('Рецепт напитка:'); //создаю переменную для хранения рецепта напитка
    drinkStorage.addValue(drinkName, {alco:drinkAlco,recipe:drinkRecipe}); //в этой строке вызываю метод, который сохранит в хэш переданные два аргумента, название напитка и хэш с признаком алкогольности и рецептом
    console.log('Напиток ' + drinkName + ' сохранен');
}

function getInfo() {
    var drinkName = prompt('Введите название напитка');
    if(drinkName in drinkStorage.storage) {
        return console.log(drinkStorage.getValue(drinkName));
    }
    else {
        return console.log('Такой напиток отсутствует в хранилище');
    }
}

function deleteInfo() {
    var drinkName3 = prompt('Введите название напитка');
    if(drinkName3 in drinkStorage.storage) {
        drinkStorage.deleteValue(drinkName3);
        console.log('Информация о напитке ' + drinkName3 + ' была удалена');
    }
    else {
        console.log('Напитка ' + drinkName3 + ' нет в хранилище');
    }
}

function getDrinksInfo() {
    console.log('Доступные напитки: ' + drinkStorage.getKeys());
}


//console.log(drinkStorage.getValue(drinkName)); //тут я пытаюсь вывести в консоль рецепт, указывая в предназначенном для этого методе имя напитка

// var drinkStorage = new HashStorage;
//     drinkStorage.addValue('Чай', {'Алкогольный':'нет','Рецепт приготовления':'взять листья зеленого чая(1/3 ч.л.), лимон(1 дольку), натертый имбирь(1 гр.), поместить все это в чашку 350-400 мл, залить кипятком на 95%, накрыть блюдцем, дать завариться 5-10 мин. Готово!'});
//     drinkStorage.addValue('Морс',{'Алкогольный':'нет','Рецепт приготовления':'взять клюкву(300гр), отжать сок, в жмых засыпать сахар(по вкусу), залить водой, довести до кипения и варить несколько минут, остудить и.. Готово!'});
//     console.log(drinkStorage.getValue('Чай'));



// N.13 Домашнее задание DRINKS_HASH
// Создать проект DRINKS_HASH.
// 1.
// Разработать класс HashStorage (в файле HashStorage.js) для хранения в хэше произвольных пар ключ-значение.
// Ключ может быть любой строкой; значение может иметь любой тип, в том числе векторный (хэш, массив и т.д.)
// Класс должен иметь следующий интерфейс (т.е. иметь следующие публичные методы):

//     addValue(key,value) — сохраняет указанное значение под указанным ключом;
//     getValue(key) — возвращает значение по указанному ключу либо undefined;
//     deleteValue(key) — удаляет значение с указанным ключом, возвращает true если значение было удалено и false если такого значения не было в хранилище;
//     getKeys() — возвращает массив, состоящий из одних ключей. 

// Класс должен быть чистым (не должен использовать никаких глобальных переменных, не, должен «пачкать экран»).
// Класс должен быть универсальным, т.е. не зависеть ни от структуры хранимых данных, ни от способа их последующего использования (в т.ч. не должен содержать никаких ссылок на DOM, т.к. может использоваться и вообще без веб-страницы).
// 2.
// Создать объект drinkStorage класса HashStorage для хранения рецептов напитков.
// Ключом является название напитка; значением — информация о напитке (алкогольный напиток или нет, строка с рецептом приготовления и т.д. по желанию).
// 3.
// Разработать веб-страницу для работы с хранилищем рецептов напитков.
// На странице должны быть кнопки:

//     «ввод информации о напитке» — последовательно спрашивает название напитка, алкогольный он или нет, рецепт его приготовления; сохраняет информацию о напитке в хранилище.
//     «получение информации о напитке» — спрашивает название напитка и выдаёт (на страницу, в консоль или в alert) либо информацию о нём (по примеру, приведённому ниже), либо сообщение об отсутствии такого напитка в хранилище.
//     «удаление информации о напитке» — спрашивает название напитка и удаляет его из хранилища (если он там есть) с выдачей соответствующего сообщения в информационное окно.
//     «перечень всех напитков» — выдаёт в информационное окно перечень всех напитков из хранилища (только названия). 


// Пример информации о напитке:

// напиток Маргарита
// алкогольный: да
// рецепт приготовления:
// продукт, продукт... смешать...
